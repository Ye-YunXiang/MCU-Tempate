/*********************************************************************************************/
【*】程序简介

-工程名称：DMA 存储器到外设模式实验
-实验平台: 野火STM32 霸道 开发板 

【 ！】功能简介：
利用DMA向串口发送大量的数据，同时让CPU控制LED的状态


【 ！】实验操作：
把编译好的程序下载到开发板。程序运行后在串口调试助手可接收到大量的数据，同时开发板上RGB彩色灯不断闪烁。


【*】注意事项：
由于使用DMA向串口发送的数据的量非常的大，长时间运行可能会导致电脑端串口调试助手会卡死，鼠标乱飞的情况，
所以在测试时最好把串口调试助手的自动清除接收区数据功能勾选上或把DMA配置中的循环模式改为单次模式。


/*********************************************************************************************/
【*】 引脚分配

   LED灯：

	LED_R	<-----> PB5
	LED_G	<-----> PB0
	LED_B	<-----> PB1

	对应引脚低电平则LED灯亮

 * 对于霸道V2板，在实验中，请不要拔掉旁边J73对应盖好的黄色跳帽，这样会导致LED失去3V3的电源而不能工作。


   串口：

	CH340  RXD  <----->  USART1  TX  (PA9)
	CH340  TXD  <----->  USART1  RX  (PA10)


 * 开发板中的CH340的收发引脚默认通过跳帽连接到USART1， 如果想使用其他串口，
   可以把 CH340 跟 USART1 直接的连接跳帽拔掉，然后再把其他串口的 IO用杜邦线接到CH340的收发引脚即可。


/*********************************************************************************************/
【*】程序描述：

< bsp_usart_dma.h >

	1.宏定义USART的端口、时钟、波特率
	2.宏定义USART对应的GPIO的时钟、引脚
	3.宏定义串口对应的DMA请求通道、外设寄存器地址（本程序则为串口的数据寄存器）、一次发送的数据大小



< bsp_usart_dma.c >

- 串口DMA传输配置       ----（位置在对应文件的最后）

	1.引用结构体
	2.开启DMA的时钟
	3.设定源数据地址、目标地址、方向、传输大小
	4.设置数据指针的增量模式，设定两边数据的单位大小
	5.设定DMA循环模式、设定优先级、失能内存到内存传输模式
	6.配置DMA通道，使能DMA以启动DMA数据传输

PS：其中，在此函数前使用的USART函数配置与USART实验所使用的相同。
- 配置USART

	1.引用结构体
	2.把GPIO和串口外设的时钟打开，
	3.设置对应的引脚模式，TX引脚为复用推挽输出，RX引脚为浮空输入
	4.配置串口波特率、帧数据长度、停止位长度、是否启用校验位、是否使用硬件流控制、工作模式
	5.完成串口的初始化配置
	6.使能串口接收中断，使能串口

- 字符发送

	1.发送一个字节数据到USART
	2.等待发送数据寄存器为空
	3.调用发送字节函数，通过循环，使程序能够发送字符串

- 重定向 prinft 和 scanf函数

	1.修改属于printf函数内部的fputc函数，把字符写入我们的USART位置输出
	2.修改属于scanf函数内部的fgetc函数，使其等待串口输入数据再输出



< main.c >

	1.初始化串口
	2.配置使用DMA模式
	3.初始化LED灯
	4.把要发送的源数据填满“p”
	5.设置开启USART1的DMA发送传输
	6.为了演示使用DMA传输是不使用CPU的，让CPU去控制LED灯，让LED灯一直闪烁




/*********************************************************************************************/

【*】 联系我们

-野火官网  :https://embedfire.com
-野火论坛  :http://www.firebbs.cn
-野火商城  :https://yehuosm.tmall.com/
-野火资料下载中心 :http://doc.embedfire.com/products/link

/*********************************************************************************************/
